import os
import json
import time
import pandas as pd
import telebot
from telebot import types
import threading

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards.broadcast_keyboards import (
    get_message_type_keyboard,
    get_confirm_keyboard,
    get_template_selection_keyboard,
    get_back_to_broadcast_keyboard,
    get_cancel_keyboard,
    get_pagination_keyboard
)
from keyboards.main_menu_keyboard import get_main_menu_keyboard

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –∏ API
from utils import (
    load_config,
    read_excel_numbers,
    normalize_phone_number,
    create_chat_id,
    is_valid_interval
)
from api import send_message, send_file_by_upload

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
broadcast_data = {}

def register_broadcast_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        bot (telebot.TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_user_state –∏ set_user_state –∏–∑ main_menu_handlers
    from handlers.main_menu_handlers import get_user_state, set_user_state
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    @bot.message_handler(content_types=['document'], 
                         func=lambda message: get_user_state(message.chat.id) == 'broadcast')
    def handle_document(message):
        chat_id = message.chat.id
        file_info = bot.get_file(message.document.file_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_name = message.document.file_name
        if not file_name.endswith(('.xls', '.xlsx')):
            bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls –∏–ª–∏ .xlsx)")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = f"temp_{chat_id}.xlsx"
        
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        try:
            # –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞
            phone_numbers = read_excel_numbers(file_path)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤
            if not phone_numbers:
                bot.send_message(chat_id, "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.")
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(file_path):
                    os.remove(file_path)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            broadcast_data[chat_id] = {
                'phone_numbers': phone_numbers,
                'file_path': file_path
            }
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                chat_id, 
                f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(phone_numbers)} –Ω–æ–º–µ—Ä–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=get_message_type_keyboard()
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            set_user_state(chat_id, 'broadcast_select_type')
            
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if os.path.exists(file_path):
                os.remove(file_path)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    @bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥' and 
                         get_user_state(message.chat.id) == 'broadcast')
    def cancel_broadcast_file_upload(message):
        chat_id = message.chat.id
        set_user_state(chat_id, 'main_menu')
        bot.send_message(chat_id, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
                         reply_markup=get_main_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    @bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'broadcast_select_type')
    def handle_message_type_selection(message):
        chat_id = message.chat.id
        
        if message.text == 'üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
            set_user_state(chat_id, 'broadcast_text_message')
            broadcast_data[chat_id]['message_type'] = 'text'
            bot.send_message(
                chat_id, 
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=get_cancel_keyboard()
            )
            
        elif message.text == 'üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + üóÇÔ∏è —Ñ–∞–π–ª':
            set_user_state(chat_id, 'broadcast_text_message_with_file')
            broadcast_data[chat_id]['message_type'] = 'text_with_file'
            bot.send_message(
                chat_id, 
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=get_cancel_keyboard()
            )
            
        elif message.text == 'üßæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_path = os.path.join('config', 'templates.json')
            templates_config = load_config(templates_path)
            
            if templates_config and 'templates' in templates_config and templates_config['templates']:
                set_user_state(chat_id, 'broadcast_select_template')
                broadcast_data[chat_id]['message_type'] = 'template'
                broadcast_data[chat_id]['templates'] = templates_config['templates']
                
                bot.send_message(
                    chat_id, 
                    "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:",
                    reply_markup=get_template_selection_keyboard(templates_config['templates'])
                )
            else:
                bot.send_message(
                    chat_id, 
                    "‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏'.",
                    reply_markup=get_message_type_keyboard()
                )
                
        elif message.text == 'üîô –ù–∞–∑–∞–¥':
            set_user_state(chat_id, 'broadcast')
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            if chat_id in broadcast_data:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
                if 'file_path' in broadcast_data[chat_id] and os.path.exists(broadcast_data[chat_id]['file_path']):
                    os.remove(broadcast_data[chat_id]['file_path'])
                del broadcast_data[chat_id]
            
            bot.send_message(
                chat_id, 
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
        else:
            bot.send_message(
                chat_id, 
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
                reply_markup=get_message_type_keyboard()
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    @bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'broadcast_text_message')
    def handle_text_message(message):
        chat_id = message.chat.id
        
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            set_user_state(chat_id, 'broadcast_select_type')
            bot.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=get_message_type_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        broadcast_data[chat_id]['message'] = message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        show_broadcast_info(bot, chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º (–ø–µ—Ä–≤—ã–π —à–∞–≥ - —Ç–µ–∫—Å—Ç)
    @bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'broadcast_text_message_with_file')
    def handle_text_message_with_file_step1(message):
        chat_id = message.chat.id
        
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            set_user_state(chat_id, 'broadcast_select_type')
            bot.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=get_message_type_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        broadcast_data[chat_id]['message'] = message.text
        
        # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        set_user_state(chat_id, 'broadcast_upload_file')
        bot.send_message(
            chat_id, 
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.):",
            reply_markup=get_cancel_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    @bot.message_handler(content_types=['document', 'photo', 'video', 'audio'],
                        func=lambda message: get_user_state(message.chat.id) == 'broadcast_upload_file')
    def handle_file_upload(message):
        chat_id = message.chat.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º file_id
        if message.content_type == 'document':
            file_id = message.document.file_id
            file_name = message.document.file_name
            file_type = 'document'
        elif message.content_type == 'photo':
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            file_name = f"photo_{file_id}.jpg"
            file_type = 'photo'
        elif message.content_type == 'video':
            file_id = message.video.file_id
            file_name = message.video.file_name if message.video.file_name else f"video_{file_id}.mp4"
            file_type = 'video'
        elif message.content_type == 'audio':
            file_id = message.audio.file_id
            file_name = message.audio.file_name if message.audio.file_name else f"audio_{file_id}.mp3"
            file_type = 'audio'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('files', exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        media_path = os.path.join('files', file_name)
        with open(media_path, 'wb') as media_file:
            media_file.write(downloaded_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        broadcast_data[chat_id]['media'] = {
            'path': media_path,
            'type': file_type,
            'name': file_name
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        show_broadcast_info(bot, chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    @bot.message_handler(func=lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' and
                         get_user_state(message.chat.id) == 'broadcast_upload_file')
    def cancel_file_upload(message):
        chat_id = message.chat.id
        set_user_state(chat_id, 'broadcast_text_message_with_file')
        bot.send_message(
            chat_id, 
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:",
            reply_markup=get_cancel_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
    @bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'broadcast_select_template')
    def handle_template_selection(message):
        chat_id = message.chat.id
        
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            set_user_state(chat_id, 'broadcast_select_type')
            bot.send_message(
                chat_id, 
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=get_message_type_keyboard()
            )
            return
        
        # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        selected_template = None
        for template in broadcast_data[chat_id].get('templates', []):
            if template['name'] == message.text:
                selected_template = template
                break
        
        if not selected_template:
            bot.send_message(
                chat_id, 
                "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=get_template_selection_keyboard(broadcast_data[chat_id].get('templates', []))
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
        broadcast_data[chat_id]['template'] = selected_template
        broadcast_data[chat_id]['message'] = selected_template['text']
        
        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª
        if selected_template.get('hasFile') and selected_template.get('filePath'):
            file_path = selected_template['filePath']
            if os.path.exists(file_path):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_name = os.path.basename(file_path)
                file_extension = os.path.splitext(file_name)[1].lower()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if file_extension in ['.jpg', '.jpeg', '.png', '.gif']:
                    file_type = 'photo'
                elif file_extension in ['.mp4', '.avi', '.mov']:
                    file_type = 'video'
                elif file_extension in ['.mp3', '.ogg', '.wav']:
                    file_type = 'audio'
                else:
                    file_type = 'document'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–µ
                broadcast_data[chat_id]['media'] = {
                    'path': file_path,
                    'type': file_type,
                    'name': file_name
                }
            else:
                bot.send_message(
                    chat_id, 
                    f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ({file_path}). –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º."
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        show_broadcast_info(bot, chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    @bot.message_handler(func=lambda message: get_user_state(message.chat.id) == 'broadcast_confirm')
    def handle_broadcast_confirmation(message):
        chat_id = message.chat.id
        
        if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not broadcast_data.get(chat_id, {}).get('phone_numbers'):
                bot.send_message(
                    chat_id, 
                    "‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
                clear_broadcast_data(chat_id)
                set_user_state(chat_id, 'main_menu')
                return
            
            if not broadcast_data[chat_id].get('message'):
                bot.send_message(
                    chat_id, 
                    "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_main_menu_keyboard()
                )
                clear_broadcast_data(chat_id)
                set_user_state(chat_id, 'main_menu')
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            bot.send_message(
                chat_id, 
                "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            broadcast_thread = threading.Thread(
                target=start_broadcast,
                args=(bot, chat_id, broadcast_data[chat_id])
            )
            broadcast_thread.start()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            set_user_state(chat_id, 'main_menu')
            
        elif message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
            # –û—Ç–º–µ–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
            set_user_state(chat_id, 'broadcast_select_type')
            bot.send_message(
                chat_id, 
                "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:",
                reply_markup=get_message_type_keyboard()
            )
            
        else:
            bot.send_message(
                chat_id, 
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
                reply_markup=get_confirm_keyboard()
            )
    
def show_broadcast_info(bot, chat_id):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        bot (telebot.TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from handlers.main_menu_handlers import set_user_state
    
    if chat_id not in broadcast_data:
        bot.send_message(
            chat_id, 
            "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        set_user_state(chat_id, 'main_menu')
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    info_text = "üì¨ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ:*\n\n"
    info_text += f"üì± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤: *{len(broadcast_data[chat_id]['phone_numbers'])}*\n\n"
    info_text += f"üìù –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n```\n{broadcast_data[chat_id]['message']}\n```\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    if 'media' in broadcast_data[chat_id]:
        file_name = broadcast_data[chat_id]['media']['name']
        file_type = broadcast_data[chat_id]['media']['type'].capitalize()
        info_text += f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: *{file_name}* ({file_type})\n"
    
    info_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:"
    
    bot.send_message(
        chat_id, 
        info_text,
        reply_markup=get_confirm_keyboard(),
        parse_mode='Markdown'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    set_user_state(chat_id, 'broadcast_confirm')

def start_broadcast(bot, chat_id, broadcast_info):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        bot (telebot.TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        broadcast_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–µ.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    profile_config = load_config(os.path.join('config', 'profile.json'))
    interval_config = load_config(os.path.join('config', 'interval.json'))
    
    if not profile_config:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        clear_broadcast_data(chat_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º API-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    api_url = profile_config.get('apiUrl')
    media_url = profile_config.get('mediaUrl')
    id_instance = profile_config.get('idInstance')
    api_token = profile_config.get('apiTokenInstance')
    
    if not all([api_url, id_instance, api_token]):
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        clear_broadcast_data(chat_id)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    interval = interval_config.get('interval', 5) if interval_config else 5
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    phone_numbers = broadcast_info.get('phone_numbers', [])
    message = broadcast_info.get('message', '')
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total = len(phone_numbers)
    success = 0
    failed = 0
    
    # –û—Ç—á–µ—Ç –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.send_message(chat_id, f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...")
    
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    for idx, phone in enumerate(phone_numbers):
        try:
            # –°–æ–∑–¥–∞–µ–º chat_id –¥–ª—è WhatsApp
            whatsapp_chat_id = create_chat_id(phone)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
            if 'media' in broadcast_info:
                media_path = broadcast_info['media']['path']
                if os.path.exists(media_path):
                    response = send_file_by_upload(
                        media_url, id_instance, api_token, 
                        whatsapp_chat_id, media_path, 
                        caption=message
                    )
                    if response and 'idMessage' in response:
                        success += 1
                    else:
                        failed += 1
                else:
                    # –ï—Å–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    response = send_message(api_url, id_instance, api_token, whatsapp_chat_id, message)
                    if response and 'idMessage' in response:
                        success += 1
                    else:
                        failed += 1
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = send_message(api_url, id_instance, api_token, whatsapp_chat_id, message)
                if response and 'idMessage' in response:
                    success += 1
                else:
                    failed += 1
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if (idx + 1) % 10 == 0:
                progress = round((idx + 1) / total * 100)
                bot.send_message(
                    chat_id, 
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {idx + 1}/{total} ({progress}%)\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–∫–∏: {failed}"
                )
            
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            time.sleep(interval)
            
        except Exception as e:
            failed += 1
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –Ω–æ–º–µ—Ä {phone}: {str(e)}")
    
    # –û—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.send_message(
        chat_id, 
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üì± –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    clear_broadcast_data(chat_id)

def clear_broadcast_data(chat_id):
    """
    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if chat_id in broadcast_data:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏
        if 'file_path' in broadcast_data[chat_id]:
            file_path = broadcast_data[chat_id]['file_path']
            if os.path.exists(file_path) and 'temp_' in file_path:
                os.remove(file_path)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del broadcast_data[chat_id]